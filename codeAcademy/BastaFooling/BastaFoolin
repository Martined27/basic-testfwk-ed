class Menu:
    def __init__(self, name, items, start_time, end_time):
        self.name = name
        self.items = items
        self.start_time = start_time
        self.end_time = end_time

    def __repr__(self):
        return f"{self.name} menu available from {self.start_time}am to {self.end_time}pm"

    def calculate_bill(self, purchased_items):
        total = 0
        for item in purchased_items:
            total += self.items.get(item, 0)
        return total

# Create the brunch menu
brunch_items = {
    'pancakes': 7.50, 'waffles': 9.00, 'burger': 11.00, 'home fries': 4.50,
    'coffee': 1.50, 'espresso': 3.00, 'tea': 1.00, 'mimosa': 10.50, 'orange juice': 3.50
}
brunch = Menu("brunch", brunch_items, 11, 16)

# Create the early-bird menu
early_bird_items = {
    'salumeria plate': 8.00, 'salad and breadsticks (serves 2, no refills)': 14.00,
    'pizza with quattro formaggi': 9.00, 'duck ragu': 17.50, 'mushroom ravioli (vegan)': 13.50,
    'coffee': 1.50, 'espresso': 3.00
}
early_bird = Menu("early-bird", early_bird_items, 15, 18)

# Create the dinner menu
dinner_items = {
    'crostini with eggplant caponata': 13.00, 'caesar salad': 16.00,
    'pizza with quattro formaggi': 11.
}

#10 Test the calculate_bill method for the brunch order
breakfast_order = ['pancakes', 'home fries', 'coffee']
breakfast_total = brunch.calculate_bill(breakfast_order)
print(f"Breakfast total: ${breakfast_total:.2f}")

#11 Test the calculate_bill method for the early-bird order
early_bird_order = ['salumeria plate', 'mushroom ravioli (vegan)']
early_bird_total = early_bird.calculate_bill(early_bird_order)
print(f"Early-bird total: ${early_bird_total:.2f}")

### Creating the Franchises

class Franchise:
    def __init__(self, address, menus):
        self.address = address
        self.menus = menus

    def __repr__(self):
        return f"Franchise located at {self.address}"

    def available_menus(self, time):
        available = [menu for menu in self.menus if menu.start_time <= time <= menu.end_time]
        return available

# Create the menus
brunch_items = {
    'pancakes': 7.50, 'waffles': 9.00, 'burger': 11.00, 'home fries': 4.50,
    'coffee': 1.50, 'espresso': 3.00, 'tea': 1.00, 'mimosa': 10.50, 'orange juice': 3.50
}
brunch = Menu("brunch", brunch_items, 11, 16)

early_bird_items = {
    'salumeria plate': 8.00, 'salad and breadsticks (serves 2, no refills)': 14.00,
    'pizza with quattro formaggi': 9.00, 'duck ragu': 17.50, 'mushroom ravioli (vegan)': 13.50,
    'coffee': 1.50, 'espresso': 3.00
}
early_bird = Menu("early-bird", early_bird_items, 15, 18)

dinner_items = {
    'crostini with eggplant caponata': 13.00, 'caesar salad': 16.00,
    'pizza with quattro formaggi': 11.00, 'duck ragu': 19.50,
    'mushroom ravioli (vegan)': 13.50, 'coffee': 2.00, 'espresso': 3.00
}
dinner = Menu("dinner", dinner_items, 17, 23)

kids_items = {
    'chicken nuggets': 6.50, 'fusilli with wild mushrooms': 12.00, 'apple juice': 3.00
}
kids = Menu("kids", kids_items, 11, 21)

# Create the franchises
menus = [brunch, early_bird]

### Creating Businesses!
class Business:
    def __init__(self, name, franchises):
        self.name = name
        self.franchises = franchises

# Create the arepas menu
arepas_items = {
    'arepa pabellon': 7.00, 'pernil arepa': 8.50,
    'guayanes arepa': 8.00, 'jamon arepa': 7.50
}
arepas_menu = Menu("Take a' Arepa", arepas_items, 10, 20)

# Create the arepas franchise
arepas_place = Franchise("189 Fitzgerald Avenue", [arepas_menu])

# Create the businesses
flagship_store = Franchise("1232 West End Road", [brunch, early_bird, dinner, kids])
new_installment = Franchise("12 East Mulberry Street", [brunch, early_bird, dinner, kids])

basta_fazoolin = Business("Basta Fazoolin' with my Heart", [flagship_store, new_installment])
take_a_arepa = Business("Take a' Arepa", [arepas_place])

# Test the available_menus method
print(flagship_store.available_menus(12))  # Should show brunch and kids
print(flagship_store.available_menus(17))  # Should show dinner and kids
